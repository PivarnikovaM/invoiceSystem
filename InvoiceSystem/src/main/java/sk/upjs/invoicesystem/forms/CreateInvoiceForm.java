/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.upjs.invoicesystem.forms;

import java.awt.Color;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import org.bson.types.ObjectId;
import sk.upjs.invoicesystem.*;

/**
 *
 * @author kriza
 */
public class CreateInvoiceForm extends javax.swing.JDialog {

    private StatisticsDao statisticsDao = ObjectFactory.INSTANCE.getStatisticsDao();
    private InvoicePdfCreator invoicePdfCreator = new InvoicePdfCreator();
    private Invoice newInvoice = new Invoice();
    private Invoice selectedInvoice = null;
    private InvoicesDao invoices = ObjectFactory.INSTANCE.getInvoicesDao();
    private ItemsDao items = ObjectFactory.INSTANCE.getItemsDao();

    private ChooseCompanyForm chooseSupplier = new ChooseCompanyForm(this, true, "supplier");
    private ChooseCompanyForm chooseCustomer = new ChooseCompanyForm(this, true, "customer");

    private Company supplier;
    private Company customer;

    public void setCustomer(Company Customer) {
        this.customer = Customer;
    }

    public void setSupplier(Company Supplier) {
        this.supplier = Supplier;
    }

    public void setButtonTextChooseCustomer(String name) {
        this.chooseCustomerButton.setText(name);
    }

    public void setButtonTextChooseSupplier(String name) {
        this.chooseSupplierButton.setText(name);
    }

    //volany pri create invoice z menuForm
    public CreateInvoiceForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        setLocationRelativeTo(parent);
    }

    //volany pri update invoice z invoiceForm
    public CreateInvoiceForm(javax.swing.JDialog parent, boolean modal, int selectedRow) {
        super(parent, modal);

        this.selectedInvoice = invoices.getInvoices().get(selectedRow);
        initComponents();

        constantSymbolField.setText(Integer.toString(selectedInvoice.getConstantSymbol()));
        paymentsFormComboBox.setSelectedItem(selectedInvoice.getPaymentsForm());
        currencyComboBox1.setSelectedItem(selectedInvoice.getCurrency());
        paymentsDueDateJDateChooser.setDate(selectedInvoice.getPaymentDueDate());
        deliveryDateJDateChooser.setDate(selectedInvoice.getDeliveryDate());
        exposureDateJDateChooser.setDate(selectedInvoice.getExposureDate());
        Integer a = selectedInvoice.getVariableSymbol();
        variableSymbolField.setText(Integer.toString(selectedInvoice.getVariableSymbol()));
        noteField.setText(selectedInvoice.getNote());
        drewUpByField.setText(selectedInvoice.getDrewUpBy());
        supplier = selectedInvoice.getSupplier();
        customer = selectedInvoice.getCustomer();
        chooseSupplierButton.setText(supplier.getCompanyName());
        chooseCustomerButton.setText(customer.getCompanyName());
        newInvoice.setProducts(selectedInvoice.getProducts());
        createInvoiceButton.setText("Update");

    }

    //volany pri create invoice z invoiceForm
    public CreateInvoiceForm(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        chooseSupplierButton = new javax.swing.JButton();
        chooseCustomerButton = new javax.swing.JButton();
        createSupplierButton = new javax.swing.JButton();
        createCustomerButton = new javax.swing.JButton();
        constantSymbolField = new javax.swing.JTextField();
        drewUpByField = new javax.swing.JTextField();
        noteField = new javax.swing.JTextField();
        createInvoiceButton = new javax.swing.JButton();
        newProductField = new javax.swing.JTextField();
        newCountField = new javax.swing.JTextField();
        newPriceField = new javax.swing.JTextField();
        addNewProductButton = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        deleteProductButton = new javax.swing.JButton();
        paymentsFormComboBox = new javax.swing.JComboBox<>();
        newUnitOfQuantityField = new javax.swing.JTextField();
        variableSymbolField = new javax.swing.JTextField();
        currencyComboBox1 = new javax.swing.JComboBox<>();
        exposureDateJDateChooser = new com.toedter.calendar.JDateChooser();
        deliveryDateJDateChooser = new com.toedter.calendar.JDateChooser();
        paymentsDueDateJDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create invoice");
        setMaximumSize(new java.awt.Dimension(528, 755));
        setMinimumSize(new java.awt.Dimension(528, 755));
        setPreferredSize(new java.awt.Dimension(528, 755));
        getContentPane().setLayout(null);

        chooseSupplierButton.setFont(new java.awt.Font("Alegreya", 2, 14)); // NOI18N
        chooseSupplierButton.setForeground(new java.awt.Color(0, 51, 153));
        chooseSupplierButton.setText("Choose supplier");
        chooseSupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSupplierButtonActionPerformed(evt);
            }
        });
        getContentPane().add(chooseSupplierButton);
        chooseSupplierButton.setBounds(10, 50, 332, 29);

        chooseCustomerButton.setFont(new java.awt.Font("Alegreya", 2, 14)); // NOI18N
        chooseCustomerButton.setForeground(new java.awt.Color(0, 51, 153));
        chooseCustomerButton.setText("Choose customer");
        chooseCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseCustomerButtonActionPerformed(evt);
            }
        });
        getContentPane().add(chooseCustomerButton);
        chooseCustomerButton.setBounds(10, 90, 332, 29);

        createSupplierButton.setFont(new java.awt.Font("Alegreya", 2, 14)); // NOI18N
        createSupplierButton.setForeground(new java.awt.Color(0, 51, 153));
        createSupplierButton.setText("Create supplier");
        createSupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createSupplierButtonActionPerformed(evt);
            }
        });
        getContentPane().add(createSupplierButton);
        createSupplierButton.setBounds(350, 50, 149, 29);

        createCustomerButton.setFont(new java.awt.Font("Alegreya", 2, 14)); // NOI18N
        createCustomerButton.setForeground(new java.awt.Color(0, 51, 153));
        createCustomerButton.setText("Create customer");
        createCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCustomerButtonActionPerformed(evt);
            }
        });
        getContentPane().add(createCustomerButton);
        createCustomerButton.setBounds(350, 90, 149, 29);

        constantSymbolField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                constantSymbolFieldFocusLost(evt);
            }
        });
        getContentPane().add(constantSymbolField);
        constantSymbolField.setBounds(250, 150, 240, 26);
        getContentPane().add(drewUpByField);
        drewUpByField.setBounds(180, 390, 311, 26);
        getContentPane().add(noteField);
        noteField.setBounds(180, 360, 311, 26);

        createInvoiceButton.setFont(new java.awt.Font("Alegreya", 2, 14)); // NOI18N
        createInvoiceButton.setForeground(new java.awt.Color(0, 51, 153));
        createInvoiceButton.setText("Create!");
        createInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createInvoiceButtonActionPerformed(evt);
            }
        });
        getContentPane().add(createInvoiceButton);
        createInvoiceButton.setBounds(348, 680, 160, 30);
        getContentPane().add(newProductField);
        newProductField.setBounds(10, 500, 230, 26);

        newCountField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                newCountFieldFocusLost(evt);
            }
        });
        getContentPane().add(newCountField);
        newCountField.setBounds(240, 500, 80, 26);

        newPriceField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                newPriceFieldFocusLost(evt);
            }
        });
        getContentPane().add(newPriceField);
        newPriceField.setBounds(430, 500, 81, 26);

        addNewProductButton.setFont(new java.awt.Font("Alegreya", 2, 14)); // NOI18N
        addNewProductButton.setForeground(new java.awt.Color(0, 51, 153));
        addNewProductButton.setText("Add product");
        addNewProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewProductButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addNewProductButton);
        addNewProductButton.setBounds(240, 530, 132, 32);

        productsTable.setModel(new sk.upjs.invoicesystem.ItemTableModel(newInvoice));
        productsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(productsTable);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 570, 500, 103);

        deleteProductButton.setFont(new java.awt.Font("Alegreya", 2, 14)); // NOI18N
        deleteProductButton.setForeground(new java.awt.Color(0, 51, 153));
        deleteProductButton.setText("Delete product");
        deleteProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProductButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteProductButton);
        deleteProductButton.setBounds(380, 530, 119, 29);

        paymentsFormComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Money transfer", "Cash", "Cash on delivery"}));
        paymentsFormComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentsFormComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(paymentsFormComboBox);
        paymentsFormComboBox.setBounds(250, 320, 230, 27);

        newUnitOfQuantityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newUnitOfQuantityFieldActionPerformed(evt);
            }
        });
        getContentPane().add(newUnitOfQuantityField);
        newUnitOfQuantityField.setBounds(320, 500, 109, 26);

        variableSymbolField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                variableSymbolFieldFocusLost(evt);
            }
        });
        getContentPane().add(variableSymbolField);
        variableSymbolField.setBounds(10, 150, 230, 26);

        currencyComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "€", "$", "Czk"}));
        currencyComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencyComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(currencyComboBox1);
        currencyComboBox1.setBounds(10, 320, 220, 27);
        getContentPane().add(exposureDateJDateChooser);
        exposureDateJDateChooser.setBounds(180, 190, 311, 26);
        getContentPane().add(deliveryDateJDateChooser);
        deliveryDateJDateChooser.setBounds(180, 220, 311, 26);
        getContentPane().add(paymentsDueDateJDateChooser);
        paymentsDueDateJDateChooser.setBounds(180, 250, 311, 26);

        jLabel14.setFont(new java.awt.Font("Nickainley", 0, 36)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Create invoice");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(20, 0, 230, 60);

        jLabel16.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Price");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(440, 470, 110, 30);

        jLabel17.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Constant symbol");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(260, 120, 110, 30);

        jLabel18.setFont(new java.awt.Font("Alegreya", 2, 30)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Wares");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(20, 440, 110, 20);

        jLabel19.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Delivery date");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(70, 220, 110, 20);

        jLabel20.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Payment due date");
        getContentPane().add(jLabel20);
        jLabel20.setBounds(40, 250, 130, 20);

        jLabel21.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Variable symbol");
        getContentPane().add(jLabel21);
        jLabel21.setBounds(20, 120, 110, 30);

        jLabel22.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Currency");
        getContentPane().add(jLabel22);
        jLabel22.setBounds(20, 290, 110, 30);

        jLabel23.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Payment form");
        getContentPane().add(jLabel23);
        jLabel23.setBounds(260, 290, 110, 30);

        jLabel24.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Note");
        getContentPane().add(jLabel24);
        jLabel24.setBounds(120, 360, 70, 30);

        jLabel25.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Exposure date");
        getContentPane().add(jLabel25);
        jLabel25.setBounds(70, 190, 110, 20);

        jLabel26.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Drew up by");
        getContentPane().add(jLabel26);
        jLabel26.setBounds(80, 390, 110, 30);

        jLabel27.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Product");
        getContentPane().add(jLabel27);
        jLabel27.setBounds(20, 470, 110, 30);

        jLabel28.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Amount");
        getContentPane().add(jLabel28);
        jLabel28.setBounds(250, 470, 110, 30);

        jLabel29.setFont(new java.awt.Font("Alegreya", 2, 18)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Unit");
        getContentPane().add(jLabel29);
        jLabel29.setBounds(330, 470, 110, 30);

        jLabel2.setIcon(new javax.swing.ImageIcon("/Users/martinapivarnikova/Downloads/Large_UL-877.jpg")); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, -10, 530, 740);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseSupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSupplierButtonActionPerformed
        chooseSupplier.setVisible(true);
    }//GEN-LAST:event_chooseSupplierButtonActionPerformed

    private void chooseCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseCustomerButtonActionPerformed
        chooseCustomer.setVisible(true);
    }//GEN-LAST:event_chooseCustomerButtonActionPerformed

    private void createSupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createSupplierButtonActionPerformed
        new CreateCompanyForm(this, true, "supplier").setVisible(true);

    }//GEN-LAST:event_createSupplierButtonActionPerformed

    private void createCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCustomerButtonActionPerformed
        new CreateCompanyForm(this, true, "customer").setVisible(true);
    }//GEN-LAST:event_createCustomerButtonActionPerformed

    private void deleteProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProductButtonActionPerformed
        int selectedRow = productsTable.getSelectedRow();
        if (selectedRow >= 0) {
            newInvoice.getProducts().remove(newInvoice.getProducts().get(selectedRow));

            refreshItemsTable();
        }
    }//GEN-LAST:event_deleteProductButtonActionPerformed

    private void addNewProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewProductButtonActionPerformed
        String newProduct = newProductField.getText();
        String newCount = newCountField.getText();
        String newPrice = newPriceField.getText();
        String newUnitOfQuantity = newUnitOfQuantityField.getText();
        if (!"".equals(newProduct) && !"".equals(newCount) && !"".equals(newPrice) && !"".equals(newUnitOfQuantity)) {
            String name = newProduct;
            try {
                Integer count = Integer.parseInt(newCount);
                Double price = Double.parseDouble(newPrice);
                String unitOfQuantity = newUnitOfQuantity;
                Item item = new Item();
                item.setDescription(name);
                item.setAmount(count);
                item.setPricePerPiece(price);
                item.setUnitOfAmount(unitOfQuantity);
                newInvoice.getProducts().add(item);
                refreshItemsTable();
                newProductField.setText("");
                newCountField.setText("");
                newPriceField.setText("");
                newUnitOfQuantityField.setText("");

            } catch (NumberFormatException e) {
                new BadFilledForm(this, true, "Repair all red fields").setVisible(true);
            }

        }
    }//GEN-LAST:event_addNewProductButtonActionPerformed

    private void productsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsTableMouseClicked
    }//GEN-LAST:event_productsTableMouseClicked

    private void createInvoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createInvoiceButtonActionPerformed
        if (supplier == null) {
            new BadFilledForm(this, true, "Choose supplier!").setVisible(true);
        } else if (customer == null) {
            new BadFilledForm(this, true, "Choose customer!").setVisible(true);
        } else if ("".equals(variableSymbolField.getText())) {
            new BadFilledForm(this, true, "Fill Variable symbol!").setVisible(true);
        } else if ("".equals(constantSymbolField.getText())) {
            new BadFilledForm(this, true, "Fill Constant symbol!").setVisible(true);
        } else if (exposureDateJDateChooser.getDate() == null) {
            new BadFilledForm(this, true, "Choose Exposure ate!").setVisible(true);
        } else if (deliveryDateJDateChooser.getDate() == null) {
            new BadFilledForm(this, true, "Choose Delivery date!").setVisible(true);
        } else if (paymentsDueDateJDateChooser.getDate() == null) {
            new BadFilledForm(this, true, "Choose Payments due date!").setVisible(true);
        } else if (newInvoice.getProducts().size() == 0) {
            new BadFilledForm(this, true, "Add at least one product!").setVisible(true);
        } else {
            try {

                String constantSymbol = constantSymbolField.getText();
                String paymentsForm = (String) paymentsFormComboBox.getSelectedItem();
                String currency = (String) currencyComboBox1.getSelectedItem();
                String invoiceNumber = variableSymbolField.getText();
                SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.YYYY");
                String paymentDueDate = sdf.format(paymentsDueDateJDateChooser.getDate());
                String deliveryDate = sdf.format(deliveryDateJDateChooser.getDate());
                String exposureDate = sdf.format(exposureDateJDateChooser.getDate());
                String variableSymbol = variableSymbolField.getText();
                String note = noteField.getText();
                String drewUpBy = drewUpByField.getText();

                newInvoice.setConstantSymbol(Integer.parseInt(constantSymbol));
                newInvoice.setCurrency(currency);
                newInvoice.setCustomer(customer);
                newInvoice.setDeliveryDate(deliveryDateJDateChooser.getDate());
                newInvoice.setDrewUpBy(drewUpBy);
                newInvoice.setExposureDate(exposureDateJDateChooser.getDate());
                newInvoice.setInvoiceNumber(Integer.parseInt(invoiceNumber));
                newInvoice.setNote(note);
                newInvoice.setPaymentDueDate(paymentsDueDateJDateChooser.getDate());
                newInvoice.setPaymentsForm(paymentsForm);
                newInvoice.setSupplier(supplier);
                newInvoice.setVariableSymbol(Integer.parseInt(variableSymbol));

                List<Item> item = newInvoice.getProducts();

                if (selectedInvoice == null) {//ked vytvaram invoice

                    invoices.addInvoice(newInvoice);
                    for (Item item1 : item) {
                        item1.setInvoiceId(invoices.getInvoiceIdByNumber(newInvoice.getInvoiceNumber()));
                        items.addItem(item1);
                    }
                } else {//ked upravujem invoice
                    Long id = selectedInvoice.getId();
                    newInvoice.setId(id);
                    invoices.updateInvoice(newInvoice);
                    ObjectFactory.INSTANCE.getItemsDao().deleteItems(id);
                    for (Item item1 : item) {
                        item1.setInvoiceId(id);
                        items.addItem(item1);
                    }
                }

                String[] itemName = {"product1", "product2", "product3", "product4", "product5", "product6", "product7", "product8", "product9", "product10", "product11", "product12", "product13", "product14", "product15", "product16", "product17", "product18", "product19", "product20", "product21", "product22", "product23", "product24"};
                String[] intemNumber = {"i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "i10", "i11", "i12", "i13", "i14", "i15", "i16", "i17", "i18", "i19", "i20", "i21", "i22", "i23", "i24"};
                String[] unitOfAmount = {"unitOfAmount1", "unitOfAmount2", "unitOfAmount3", "unitOfAmount4", "unitOfAmount5", "unitOfAmount7", "unitOfAmount6", "unitOfAmount8", "unitOfAmount9", "unitOfAmount10", "unitOfAmount11", "unitOfAmount12", "unitOfAmount13", "unitOfAmount14", "unitOfAmount15", "unitOfAmount16", "unitOfAmount17", "unitOfAmount18", "unitOfAmount19", "unitOfAmount20", "unitOfAmount21", "unitOfAmount22", "unitOfAmount23", "unitOfAmount24"};
                String[] price = {"price1", "price2", "price3", "price4", "price5", "price6", "price7", "price8", "price9", "price10", "price11", "price12", "price13", "price14", "price15", "price16", "price17", "price18", "price19", "price20", "price21", "price22", "price23", "price24"};
                String[] pricePerPiece = {"pricePerPiece1", "pricePerPiece2", "pricePerPiece3", "pricePerPiece4", "pricePerPiece5", "pricePerPiece6", "pricePerPiece7", "pricePerPiece8", "pricePerPiece9", "pricePerPiece10", "pricePerPiece11", "pricePerPiece12", "pricePerPiece13", "pricePerPiece14", "pricePerPiece15", "pricePerPiece16", "pricePerPiece17", "pricePerPiece18", "pricePerPiece19", "pricePerPiece20", "pricePerPiece21", "pricePerPiece22", "pricePerPiece23", "pricePerPiece24"};
                String[] countOfItem = {"count1", "count2", "count3", "count4", "count5", "count6", "count7", "count8", "count9", "count10", "count11", "count12", "count13", "count14", "count15", "count16", "count17", "count18", "count19", "count20", "count21", "count22", "count23", "count24"};

                invoicePdfCreator.setField("paymentsForm", paymentsForm);
                invoicePdfCreator.setField("currency", currency);
                invoicePdfCreator.setField("invoiceNumber", invoiceNumber);
                invoicePdfCreator.setField("paymentDueDate", paymentDueDate);
                invoicePdfCreator.setField("deliveryDate", deliveryDate);
                invoicePdfCreator.setField("exposureDate", exposureDate);
                invoicePdfCreator.setField("variableSymbol", variableSymbol);
                invoicePdfCreator.setField("constantSymbol", constantSymbol);
                invoicePdfCreator.setField("note", note);
                invoicePdfCreator.setField("drewUpBy", drewUpBy);

                invoicePdfCreator.setField("IBAN", supplier.getIBAN());
                invoicePdfCreator.setField("companyName", supplier.getCompanyName());
                invoicePdfCreator.setField("street", supplier.getStreet());
                invoicePdfCreator.setField("city", supplier.getCity() + " " + supplier.getPostalCode());
                invoicePdfCreator.setField("country", supplier.getCountry());
                invoicePdfCreator.setField("email", supplier.getEmail());
                invoicePdfCreator.setField("telephoneNumber", supplier.getTelephoneNumber());
                invoicePdfCreator.setField("ICO", new Long(supplier.getICO()).toString());
                invoicePdfCreator.setField("DIC", new Long(supplier.getDIC()).toString());
                invoicePdfCreator.setField("ICDPH", new Long(supplier.getICDPH()).toString());

                invoicePdfCreator.setField("companyNameC", customer.getCompanyName());
                invoicePdfCreator.setField("streetC", customer.getStreet());
                invoicePdfCreator.setField("cityC", customer.getCity() + " " + customer.getPostalCode());
                invoicePdfCreator.setField("countryC", customer.getCountry());
                invoicePdfCreator.setField("emailC", customer.getEmail());
                invoicePdfCreator.setField("telephoneNumberC", customer.getTelephoneNumber());
                invoicePdfCreator.setField("ICOC", new Long(customer.getICO()).toString());
                invoicePdfCreator.setField("DICC", new Long(customer.getDIC()).toString());
                invoicePdfCreator.setField("ICDPHC", new Long(customer.getICDPH()).toString());

                double priceSum = 0;
                for (int i = 0; i < newInvoice.getProducts().size(); i++) {
                    invoicePdfCreator.setField(itemName[i], newInvoice.getProducts().get(i).getDescription());
                    invoicePdfCreator.setField(intemNumber[i], Integer.toString(i + 1));
                    invoicePdfCreator.setField(unitOfAmount[i], newInvoice.getProducts().get(i).getUnitOfAmount());
                    invoicePdfCreator.setField(pricePerPiece[i], Double.toString(round(newInvoice.getProducts().get(i).getPricePerPiece())));
                    invoicePdfCreator.setField(countOfItem[i], Integer.toString(newInvoice.getProducts().get(i).getAmount()));
                    invoicePdfCreator.setField(price[i], Double.toString(round(newInvoice.getProducts().get(i).getPricePerPiece() * newInvoice.getProducts().get(i).getAmount())));
                    priceSum += newInvoice.getProducts().get(i).getPricePerPiece() * newInvoice.getProducts().get(i).getAmount();
                }

                invoices.addPrice(invoices.getInvoiceIdByNumber(newInvoice.getInvoiceNumber()), priceSum);
                statisticsDao.addStatistics(newInvoice.getSupplier().getId(), newInvoice.getPaymentDueDate().getMonth() + 1);

                invoicePdfCreator.setField("priceWithoutDPH", Double.toString(round(priceSum)));
                invoicePdfCreator.setField("priceWithDPH", Double.toString(round(priceSum * 0.2)));
                invoicePdfCreator.setField("price", Double.toString(round(priceSum * 1.2)));
                invoicePdfCreator.saveAndClose();

                refreshItemsTable();
                this.dispose();

            } catch (IOException ex) {
                new BadFilledForm(this, true, "Create PDF Error - contact developer").setVisible(true);
            } catch (NumberFormatException e) {
                new BadFilledForm(this, true, "Repair all red fields").setVisible(true);

            }
        }
    }//GEN-LAST:event_createInvoiceButtonActionPerformed

    private double round(double d) {
        d = d * 100 + 0.5;
        d = ((int) d) / 100.0;
        return d;
    }

    private void paymentsFormComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentsFormComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentsFormComboBoxActionPerformed

    private void newUnitOfQuantityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newUnitOfQuantityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newUnitOfQuantityFieldActionPerformed

    private void currencyComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencyComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currencyComboBox1ActionPerformed

    private void variableSymbolFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_variableSymbolFieldFocusLost
        try {
            variableSymbolField.setForeground(Color.black);

            if (!variableSymbolField.getText().isEmpty()) {
                Integer.parseInt(variableSymbolField.getText());
            }
        } catch (NumberFormatException e) {
            variableSymbolField.setForeground(Color.red);
            new BadFilledForm(this, true, "Variable symbol must be a number!").setVisible(true);
        }
    }//GEN-LAST:event_variableSymbolFieldFocusLost

    private void constantSymbolFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_constantSymbolFieldFocusLost
        try {
            constantSymbolField.setForeground(Color.black);

            if (!constantSymbolField.getText().isEmpty()) {
                Integer.parseInt(constantSymbolField.getText());
            }
        } catch (NumberFormatException e) {
            constantSymbolField.setForeground(Color.red);
            new BadFilledForm(this, true, "Constant symbol must be a number!").setVisible(true);
        }    }//GEN-LAST:event_constantSymbolFieldFocusLost

    private void newCountFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newCountFieldFocusLost
        try {
            newCountField.setForeground(Color.black);

            if (!newCountField.getText().isEmpty()) {
                Integer.parseInt(newCountField.getText());
            }
        } catch (NumberFormatException e) {
            newCountField.setForeground(Color.red);
            new BadFilledForm(this, true, "Count must be a number!").setVisible(true);
        }    }//GEN-LAST:event_newCountFieldFocusLost

    private void newPriceFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newPriceFieldFocusLost
        try {
            newPriceField.setForeground(Color.black);

            if (!newPriceField.getText().isEmpty()) {
                Double.parseDouble(newPriceField.getText());
            }
        } catch (NumberFormatException e) {
            newPriceField.setForeground(Color.red);
            new BadFilledForm(this, true, "Price must be a number! (. as separator)").setVisible(true);
        }    }//GEN-LAST:event_newPriceFieldFocusLost

    private void refreshItemsTable() {
        ItemTableModel model = (ItemTableModel) productsTable.getModel();
        model.refresh();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton addNewProductButton;
    private javax.swing.JButton chooseCustomerButton;
    private javax.swing.JButton chooseSupplierButton;
    private javax.swing.JTextField constantSymbolField;
    private javax.swing.JButton createCustomerButton;
    private javax.swing.JButton createInvoiceButton;
    private javax.swing.JButton createSupplierButton;
    private javax.swing.JComboBox<String> currencyComboBox1;
    private javax.swing.JButton deleteProductButton;
    private com.toedter.calendar.JDateChooser deliveryDateJDateChooser;
    private javax.swing.JTextField drewUpByField;
    private com.toedter.calendar.JDateChooser exposureDateJDateChooser;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField newCountField;
    private javax.swing.JTextField newPriceField;
    private javax.swing.JTextField newProductField;
    private javax.swing.JTextField newUnitOfQuantityField;
    private javax.swing.JTextField noteField;
    private com.toedter.calendar.JDateChooser paymentsDueDateJDateChooser;
    private javax.swing.JComboBox<String> paymentsFormComboBox;
    private javax.swing.JTable productsTable;
    private javax.swing.JTextField variableSymbolField;
    // End of variables declaration//GEN-END:variables
}
